class Contact:
    """Represent a contact in the contact book."""
    def __init__(self, name, phone_number):
        """Initialize the contact with a name and phone number."""
        self.name = name
        self.phone_number = phone_number

    def __str__(self):
        """Return a string representation of the contact."""
        return f'{self.name}: {self.phone_number}'

class ContactBook:
    """Represent a contact book."""
    def __init__(self):
        """Initialize the contact book with an empty dictionary of contacts."""
        self.contacts = {}

    def add_contact(self, contact):
        """Add a contact to the contact book."""
        self.contacts[contact.name.lower()] = contact

    def view_contacts(self):
        """Print all the contacts in the contact book."""
        for contact in self.contacts.values():
            print(contact)

    def find_contact(self, name):
        """Return the contact with the given name, or None if not found."""
        return self.contacts.get(name.lower(), None)

def main():
    """Play with the contact book."""
    contact_book = ContactBook()
    while True:
        print("\nContact Book")
        print("1. Add contact")
        print("2. View contacts")
        print("3. Find contact")
        print("4. Quit")
        option = int(input("Choose an option: "))
        if option == 1:
            name = input("Enter the name: ")
            phone_number = input("Enter the phone number: ")
            contact = Contact(name, phone_number)
            contact_book.add_contact(contact)
        elif option == 2:
            contact_book.view_contacts()
        elif option == 3:
            name = input("Enter the name to find: ")
            contact = contact_book.find_contact(name)
            if contact:
                print(contact)
            else:
               